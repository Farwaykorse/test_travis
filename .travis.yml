version: ~> 1.0

language: cpp

env:
  global:
  # vcpkg
  - VCPKG_DIR:      "$HOME/tools/vcpkg"
  - TOOLCHAIN_FILE: "$HOME/tools/vcpkg/scripts/buildsystems/vcpkg.cmake"

stages:
- Build Dependencies
- "Build & Test Latest" # First: (4) builds to run first
- name: "Build & Test"  # If all succeed build rest

jobs:
  include:
  - name: vcpkg for OSX
    stage: Build Dependencies
    workspaces:
      create:
        name: OSX
        paths:
        - ${VCPKG_DIR}
    os: osx
    osx_image: xcode11.5
    env:
    - CC: gcc-9
    - CXX: g++-9
    - MACOSX_DEPLOYMENT_TARGET: '10.12' # minimum supported: xcode9 image
    before_script: skip
    script: skip
    after_script: skip
    after_success: skip

  - name: AppleClang Xcode-10.3
    stage: "Build & Test"
    os: osx
    osx_image: xcode10.3 # AppleClang 10.0.1 same compiler as Xcode10.2
    env:
    - CXX_vcpkg: g++-9 # present on xcode10.3
    workspaces:
      use: OSX

  - name: AppleClang Xcode-10.1
    os: osx
    osx_image: xcode10.1 # AppleClang 10.0.0 same compiler as Xcode 10.0
    workspaces:
      use: OSX

  # Note: can not build vcpkg on Xcode-9.3/4, missing OSX update on Travis.
  - name: AppleClang Xcode-9.4
    os: osx
    osx_image: xcode9.4 # AppleClang 9.1.0 same compiler as Xcode 9.3
    workspaces:
      use: OSX

  # Earliest available with C++17 support
  #- name: AppleClang Xcode-9
  #  os: osx
  #  osx_image: xcode9 # AppleClang 9.1.0 same compiler in Xcode 9.0, 9.1 and 9.2
  #  workspaces:
  #    use: OSX

##====--------------------------------------------------------------------====##
## Install tools and dependencies
before_install:
- |
  # Helper functions
  # usage: if [[ $(check_url '<url>') ]]; then ...
  function check_url {( set +e
    if [[ "$1" =~ 'github.com' ]]; then # check for first byte
      if curl --fail --silent --output /dev/null --connect-timeout 12 \
        --range 0-0 "$1"
      then echo true; fi
    else # request head
      if curl --fail --silent --output /dev/null --connect-timeout 12 \
        --head "$1"
      then echo true; fi
    fi
    return
  )}
- |
  # Setup
  mkdir -p ~/tools && cd ~/tools
  if [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  fi
  if [[ ${TRAVIS_EVENT_TYPE} == "cron" ]]; then
    Coverage=""
  fi
- |
  # Temporary fix for image: xcode11 to use GCC.
  if [[ ${TRAVIS_OSX_IMAGE} == "xcode11" &&
    ( "${CXX_vcpkg:-}" || ${CXX} == g++-* )
  ]]; then
    sudo installer -pkg \
    /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\
    -target /
  fi
- |
  # OSX: set Homebrew gcc to gcc@<version>, to prevent version upgrades
  if [[ "${TRAVIS_OSX_IMAGE:-}" &&
    ${TRAVIS_OSX_IMAGE} =~ ^xcode(11(\.[12])?)$
  ]]; then
    brew unlink gcc
    brew link gcc@9
  fi

install:
- |
  echo "${TRAVIS_BUILD_STAGE_NAME}"
  echo "${TRAVIS_OS_NAME}"
  echo "${TRAVIS_OSX_IMAGE}"
- |
  # Download vcpkg
  if [[ "${TRAVIS_BUILD_STAGE_NAME}" =~ .*dependencies$ ]]; then
  ( set -euo pipefail
    # Full history clone for rebuild detection.
    git clone --quiet https://github.com/Microsoft/vcpkg.git ${VCPKG_DIR}
    if [[ "$(grep -s -m 1 'v1\.10\.0/ninja-mac' ~/tools/vcpkg/scripts/vcpkgTools.xml)" ]]
    then
      git revert 19ef8e31479d8f0d6a469c134080812944f2d7c1
      echo 'reverted'
    fi
    mv -f -t ${VCPKG_DIR} ~/tools/.cache/vcpkg/* || echo "No cached files."
  ); fi
  export PATH=$PATH:${VCPKG_DIR}
- |
  # Install/Update vcpkg
  if [[ "${TRAVIS_BUILD_STAGE_NAME}" =~ .*dependencies$ ]]; then
    pushd ${VCPKG_DIR}
  ( set -euo pipefail
    VCPKG_SRC_HASH="${VCPKG_DIR}/vcpkg_src_hash" && touch ${VCPKG_SRC_HASH}
    GENERATE_SRC_HASH="(
      git log --format=format:\"%H\" --max-count=1 -- toolsrc
    )"
    if [[ ! -x "$(command -v vcpkg)" ||
      ( $(vcpkg update) == 'Warning: Different source'*'for vcpkg'* ) ||
      ( $(eval ${GENERATE_SRC_HASH}) != $(< ${VCPKG_SRC_HASH}) ) ]]
    then
      if [[ ${CC_vcpkg:-} ]];  then eval "CC=${CC_vcpkg}"; fi
      if [[ ${CXX_vcpkg:-} ]]; then eval "CXX=${CXX_vcpkg}"; fi
      if [[ ${CXX} == clang* && ${CXX_lib:-} ]]; then
        export CXXFLAGS="${CXXFLAGS:-} -stdlib=${CXX_lib}"
      fi
      if [[ ${TRAVIS_OS_NAME} == "osx" && ${CXX} == g++-* ]]; then
        export LDFLAGS="${LDFLAGS:-} -static-libstdc++ -static-libgcc"
      fi
      ./bootstrap-vcpkg.sh
      eval ${GENERATE_SRC_HASH} > ${VCPKG_SRC_HASH}
    fi
  )
    popd
  fi

script:
- |
  # Build/install libraries
  pushd ${VCPKG_DIR}
  ./vcpkg install ms-gsl
  popd
- |
  # Update installed libraries
  pushd ${VCPKG_DIR}
  ( set -euo pipefail
    ./vcpkg update # print potential updates
    if [[ $(./vcpkg upgrade) != *'installed packages are up-to-date'* ]]
    then
      ./vcpkg upgrade --no-dry-run
    fi
  ); popd
- |
  LOG_PATH='/Users/travis/tools/vcpkg/buildtrees/ms-build/config-x64-osx-dbg-out.log'
  if [[ -e "${LOG_PATH}" ]]; then
    cat "${LOG_PATH}"
  fi
- |
  LOG_PATH='/Users/travis/tools/vcpkg/buildtrees/ms-build/config-x64-osx-dbg-err.log'
  if [[ -e "${LOG_PATH}" ]]; then
    cat "${LOG_PATH}"
  fi


##====--------------------------------------------------------------------====##
before_cache:
- |
  # Select files for caching
  mkdir -p ~/tools/.cache/vcpkg
  if [[ "${TRAVIS_BUILD_STAGE_NAME}" =~ .*dependencies$ ]]; then
    cp -u -t ~/tools/.cache/vcpkg ${VCPKG_DIR}/vcpkg ${VCPKG_DIR}/vcpkg_src_hash
  fi

cache:
  directories:
  - ~/tools/.cache
